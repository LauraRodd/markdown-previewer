{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","setOptions","breaks","App","props","state","markdown","placeholder","this","setState","className","Badge","variant","id","style","width","height","margin","padding","backgroundColor","color","borderRadius","fontFamily","fontSize","value","onChange","event","updateMarkdown","target","overflow","dangerouslySetInnerHTML","__html","Button","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAGIA,EAASC,EAAQ,IAIrBD,EAAOE,WAAW,CAChBC,QAAQ,I,IAIWC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAHK,E,2DAQJD,GACbE,KAAKC,SAAS,CAACH,e,+BAGR,IAAD,OAwBN,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,YAEb,yBAAKA,UAAU,mBACb,4BACG,IACD,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,SAA7C,uBAIF,+BAGJ,yBAAKF,UAAU,YAEb,yBAAKA,UAAU,YACZ,IACD,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,QAA7C,oBAIF,yBAAKF,UAAU,cACb,8BACEG,GAAG,SACHH,UAAU,QACVI,MAnDG,CACjBC,MAAO,OACPC,OAAQ,QACRC,OAAQ,WACRC,QAAS,MACTC,gBAAiB,UACjBC,MAAO,UACPC,aAAc,MACdC,WAAY,kBACZC,SAAU,UA2CIC,MAAOhB,KAAKH,MAAMC,SAClBmB,SAAU,SAACC,GACT,EAAKC,eAAeD,EAAME,OAAOJ,SAElC,QAOT,yBAAKd,UAAU,YACZ,IACD,yBAAKA,UAAU,mBACd,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,QAA7C,aAKH,yBACEC,GAAG,UACHC,MA9DQ,CAClBC,MAAO,OACPI,gBAAiB,UACjBF,OAAQ,aACRC,QAAS,QACTG,aAAc,MACdQ,SAAU,OACVb,OAAQ,SAwDEc,wBACE,CAACC,OAAQhC,EAAOS,KAAKH,MAAMC,eAMnC,yBAAKI,UAAU,YACb,yBAAKA,UAAU,mBACb,kBAACsB,EAAA,EAAD,CACEpB,QAAQ,SACRqB,QAAS,SAACP,GACR,EAAKC,eAAe,MAHxB,qB,GAnGmBO,IAAMC,WAkHjC5B,EAAW,ikBClHG6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb37bf4f.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nlet marked = require(\"marked\");\n\n\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n  breaks: true,\n});\n\n// class component\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      markdown: placeholder\n    };\n  }\n\n// Method\n  updateMarkdown(markdown){\n    this.setState({markdown});\n  }\n\n  render(){\n    // styles\n    const inputStyle = {\n      width: \"100%\",\n      height: \"400px\", \n      margin: \"1em auto\",\n      padding: \"2em\",\n      backgroundColor: \"#19191a\",\n      color: \"#f0f0f0\",\n      borderRadius: \"5px\",\n      fontFamily: 'Source Code Pro',\n      fontSize: \"0.8rem\"\n    };\n    \n    const outputStyle = {\n      width: \"100%\",\n      backgroundColor: \"#95d2de\",\n      margin: \"1.2em auto\",\n      padding: \"1.5em\",\n      borderRadius: \"5px\",\n      overflow: \"auto\",\n      height: \"400px\"\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"container mb-3\">\n          <div className=\"row mt-4\">\n            {/* Main heading */}\n            <div className=\"col text-center\">\n              <h1>\n                {\" \"}\n                <Badge className=\"text-align-center\" variant=\"light\">\n                  Markdown Previewer\n                </Badge>\n              </h1>\n              <hr/>\n            </div>  \n          </div>\n          <div className=\"row mt-4\">\n            {/* Markdown input column */}\n            <div className=\"col-md-6\">\n              {\" \"}\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"dark\">\n                    Markdown Editor\n                  </Badge>\n                </h4>\n                <div className=\"mark-input\">\n                  <textarea \n                    id=\"editor\"\n                    className=\"input\"\n                    style={inputStyle}\n                    value={this.state.markdown}\n                    onChange={(event) => {\n                      this.updateMarkdown(event.target.value);\n                    }}> \n                    {\" \"} \n                    {/* {console.log(this.state.markdown)} */}\n                  </textarea>\n                </div>\n              </div>\n            </div>\n            {/* Preview column */}\n            <div className=\"col-md-6\">\n              {\" \"}\n              <div className=\"col text-center\">\n               <h4>\n                 <Badge className=\"text-align-center\" variant=\"info\">\n                   Preview\n                 </Badge>\n               </h4>\n              </div>\n              <div \n                id=\"preview\"\n                style={outputStyle}\n                dangerouslySetInnerHTML={\n                  {__html: marked(this.state.markdown)}\n                }>\n              </div>\n            </div>  \n          </div>  \n          {/* clear button */}\n          <div className=\"row mt-4\">\n            <div className=\"col text-center\">\n              <Button \n                variant=\"danger\"\n                onClick={(event) => {\n                  this.updateMarkdown(\"\");\n                }}\n                >Clear all\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst placeholder = \n`# This is a heading\n\n## This is a sub-heading...\n  \nHere is some in-linecode: \\`<h1>Hello World</h1>\\`.\n\nAnd here some multi-line code:\n\\`\\`\\`\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can add style to your text by making it **bold**...\n_italic_.\nOr... **_both!_**\nAnd! ~~crossing stuff out~~.\n\nThere are also\n> Block Quotes!\n\nand much more! Give it a try ;)\n\n---\n\n_Built by [Laura](https://codepen.io/laura-rodd) with [**React**](https://reactjs.org/)_\n`\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}